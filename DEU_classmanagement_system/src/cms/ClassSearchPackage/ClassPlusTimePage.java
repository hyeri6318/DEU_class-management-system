/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cms.ClassSearchPackage;

import cms.ConnectDB.ConnectDB;
import cms.UserPackage.LoginPage;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author lhl63
 */
public class ClassPlusTimePage extends javax.swing.JFrame {

    /**
     * Creates new form ClassPlusTimePage
     */
    public ClassPlusTimePage() {
        initComponents();
    }

    public void admin() {
        ConnectDB db = new ConnectDB();

        Connection conn = null;
        PreparedStatement query = null;
        PreparedStatement ps1 = null;
        Statement st = null;
        ResultSet rs1 = null;
        ResultSet rs2 = null;

        LoginPage lg = new LoginPage();

        try {
            conn = db.getConnection();
            st = conn.createStatement();

            rs1 = st.executeQuery("select * from reservation where id='" + lg.getID() + "'");

            ArrayList class_list = new ArrayList<String>();
            ArrayList id_list = new ArrayList<String>();

            while (rs1.next()) {
                class_list.add(rs1.getString("class_num"));
            }

            for (int i = 0; i < class_list.size(); i++) {
                query = conn.prepareStatement("update reservation set admin=0 where class_num='" + class_list.get(i) + "'");
                query.executeUpdate();
                
                rs2 = st.executeQuery("select id from reservation where class_num='" + class_list.get(i) + "' and approve=1 order by r_endtime desc");
            }

            while (rs2.next()) {
                id_list.add(rs2.getString("id"));
            }

            String adminStudent = id_list.get(0).toString();
            System.out.println(adminStudent);

            ps1 = conn.prepareStatement("update reservation set admin=1 where id='" + adminStudent + "'");
            ps1.executeUpdate();

            conn.close();

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        time_combobox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        plus_button = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        time_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00", "14:00:00", "15:00:00", "16:00:00", "17:00:00", "18:00:00", "19:00:00", "20:00:00", "21:00:00", "22:00:00", "23:00:00", "24:00:00", "01:00:00", "02:00:00", "03:00:00", "04:00:00", "05:00:00", "06:00:00", "07:00:00", "08:00:00" }));

        jLabel1.setText("시간 연장");

        plus_button.setText("시간 연장");
        plus_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plus_buttonActionPerformed(evt);
            }
        });

        exit.setText("이전");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel2.setText("실습실 시간 연장");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(plus_button)
                        .addGap(55, 55, 55)
                        .addComponent(exit)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 89, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(time_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(time_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plus_button)
                    .addComponent(exit))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void plus_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plus_buttonActionPerformed
        // TODO add your handling code here:
        ConnectDB db = new ConnectDB();
        Connection conn = null;
        PreparedStatement query = null;
        Statement st = null;
        ResultSet rs1 = null;
        ResultSet rs2 = null;

        LoginPage lg = new LoginPage();

        int classNum = 0;
        int seatNum = 0;
        int rtime = 0;
        int approve = 0;

        String final_time = time_combobox.getSelectedItem().toString();
        int select_time = Integer.parseInt(final_time.substring(0, 2));

        try {

            conn = db.getConnection();
            st = conn.createStatement();

            rs1 = st.executeQuery("select * from reservation where id = '" + lg.getID() + "'");   // 일치하는 아이디 -> 종료 시간 가져오기

            ArrayList class_list = new ArrayList<String>();
            ArrayList seat_list = new ArrayList<String>();
            ArrayList time_list = new ArrayList<String>();  // r_endtime 저장
            ArrayList approve_list = new ArrayList<String>();

            while (rs1.next()) {
                class_list.add(rs1.getString("class_num"));
                seat_list.add(rs1.getString("seat_num"));
                time_list.add(rs1.getString("r_endtime"));
                approve_list.add(rs1.getString("approve"));
            }

            for (int i = 0; i < time_list.size(); i++) {
               
                classNum = Integer.parseInt(class_list.get(i).toString());
                rtime = Integer.parseInt(time_list.get(i).toString().substring(0, 2));
                seatNum = Integer.parseInt(seat_list.get(i).toString());
               
                if (Integer.parseInt(approve_list.get(i).toString()) == 0) {
                    JOptionPane.showMessageDialog(null, "예약되어 있지 않은 학생입니다.");
                }
            }

            if (select_time > rtime) {

                // reservation 전체 확인
                rs2 = st.executeQuery("select id from reservation where class_num='" + classNum + "' and seat_num='" + seatNum + "' and approve=1 and substr(r_starttime,0,2) > '" + select_time + "'");
                ArrayList id_list = new ArrayList<String>();

                while (rs2.next()) {
                    id_list.add(rs2.getString("id"));
                }

                if (id_list.isEmpty()) {
                    query = conn.prepareStatement("UPDATE RESERVATION SET R_ENDTIME = '" + final_time + "' where id = '" + lg.getID() + "'");
                    query.executeUpdate();
                    admin();
                    JOptionPane.showMessageDialog(null, "시간 연장이 되었습니다.");
                } else {
                    JOptionPane.showMessageDialog(null, "예약자가 있어 시간 연장이 불가능합니다.");
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_plus_buttonActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_exitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClassPlusTimePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClassPlusTimePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClassPlusTimePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClassPlusTimePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClassPlusTimePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton plus_button;
    private javax.swing.JComboBox<String> time_combobox;
    // End of variables declaration//GEN-END:variables
}
